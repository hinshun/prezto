#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Capslock as ctrl
setxkbmap -option ctrl:nocaps

alias multi-monitor='xrandr --output eDP1 --mode 3200x1800 --output DP1 --auto --left-of eDP1'

# UCP Aliases
alias ds-run-ucp-local='docker run -it --rm --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp'

# DTR Aliases
alias ds-dtr-reconfigure='ds-dtr reconfigure --ucp-insecure-tls --ucp-url $UCP_HOST:$UCP_PORT --ucp-username $UCP_USER --ucp-password $UCP_PASS'
alias ds-dtr-upgrade='ds-dtr upgrade --ucp-insecure-tls --ucp-url $UCP_HOST:$UCP_PORT --ucp-username $UCP_USER --ucp-password $UCP_PASS'
alias ds-dtr-nuke='docker ps -a | grep dtr | grep -v enzi | awk '"'"'{print $1}'"'"' | xargs docker rm -f; docker volume ls | grep dtr | awk '"'"'{print $2}'"'"' | xargs docker volume rm'
alias ds-dtr-trust='sudo mkdir -p /etc/docker/certs.d/$DTR_HOST; openssl s_client -showcerts -connect $DTR_HOST:443 2>/dev/null < /dev/null | openssl x509 -outform PEM 2>/dev/null | sudo tee /etc/docker/certs.d/$DTR_HOST/ca.crt'
alias ds-dtr-etcdctl='docker run --rm -v dtr-ca-$REPLICA_ID:/ca --net dtr-br -it --entrypoint /etcdctl docker/dtr-etcd:v2.2.4 --endpoint https://dtr-etcd-$REPLICA_ID.dtr-br:2379 --ca-file /ca/etcd/cert.pem --key-file /ca/etcd-client/key.pem --cert-file /ca/etcd-client/cert.pem'

string2hex() {
  local string

  if [[ -z $@ ]]; then
    string=$(less <&0)
  else
    string=$@
  fi
  echo -n "$string" | od -A n -t x1 | sed 's/ *//g'
}

fco() {
  git checkout $(git branch -vv | fzf --header "Pick branch to checkout" | sed 's/^\*\? *//g' | awk '{print $1}')
}

ds-log() {
  tput setaf $1
  echo -n $2
  tput sgr0
  echo "[DS]" ${@:3}
}

ds-log-info() {
  # blue
  ds-log 4 "INFO" $@
}

ds-log-fatal() {
  # red
  ds-log 1 "FATA" $@
}

ds-log-warn() {
  # yellow
  ds-log 3 "WARN" $@ >&2
}

ds-switch() {
  local docker none
  none="none"
  docker=$( ( cd $HOME/.bin/docker-versions ; ls docker* ; echo $none ) | fzf -1 --header "Pick docker version for host" ) &&

  ds-log-info "Switching to $docker..."
  if [[ $docker == $none ]]; then
    rm $HOME/.bin/docker
  else
    cp $HOME/.bin/docker-versions/$docker $HOME/.bin/docker
  fi
}

ds-machine-create() {
  local iso
  iso=$( ls $HOME/iso/*.iso | fzf -1 --header "Pick ISO for the new machine" ) &&

  # Hack to check iso emptiness
  echo $iso > /dev/null
  if [[ $iso == "" ]]; then
    ds-log-fatal "No iso was selected. Aborting."
    return 0
  fi

  ds-log-info "Create KVM using iso $iso..."
  docker-machine create -d kvm --kvm-memory 2048 --kvm-disk-size 8000 --kvm-cache-mode unsafe --kvm-boot2docker-url $iso $@
}

ds-machine-create-cluster() {
  local node machine_env host_address has_etcd has_consul

  node=$( ds-machine-ls "Pick node for keystore" ) &&
  machine_env=$( docker-machine env $node ) &&
  host_address=$( docker-machine ip $node ) &&

  has_etcd=$( ( eval "${machine_env}" ; docker ps ) | grep etcd | wc -l )
  if [[ $has_etcd -ge 1 ]]; then
    ds-log-info "Detected etcd keystore on node $node..."
    ds-machine-create --engine-opt="cluster-store=etcd://${host_address}:$ETCD_CLIENT_PORT" --engine-opt="cluster-advertise=eth1:2376" $@
    return 0
  fi

  has_consul=$( ( eval "${machine_env}" ; docker ps ) | grep consul | wc -l )
  if [[ $has_consul -ge 1 ]]; then
    ds-log-info "Detected consul keystore KVM on node $node..."
    ds-machine-create --engine-opt="cluster-store=consul://${host_address}:$CONSUL_PORT" --engine-opt="cluster-advertise=eth1:2376" $@
    return 0
  fi

  ds-log-fatal "No supported keystore (etcd, consul) was detected on node $node."
  return 1
}

ds-machine-ls() {
  local fzf_header
  if [[ $1 != "" ]]; then
    fzf_header="--header=$1"
  fi

  docker-machine ls | fzf -1 --header-lines 1 $fzf_header | awk '{print $1}'
}

ds-machine-transfer() {
  local nodes images
  nodes=$( docker-machine ls | fzf -1 -m --header-lines 1 --header "Pick node(s) for image transfer" | awk '{print $1}' ) &&

  if [[ $@ != "" ]]; then
    images=$@
  else
    images=$( docker images | fzf -1 -m --header-lines 1 --header "Pick images for image transfer" | awk '{print $1 ":" $2}' ) &&
  fi

  echo $nodes | while read node ; do
    ds-machine-transfer-images $node $images
  done
}

ds-machine-transfer-ucp() {
  ds-machine-transfer $( docker run --rm docker/ucp images --list ; echo docker/ucp )
}

ds-machine-transfer-dtr() {
  ds-machine-transfer $( docker run --rm dockerhubenterprise/dtr-dev images ; echo dockerhubenterprise/dtr-dev )
}

ds-machine-transfer-images() {
  command -v jq >/dev/null 2>&1 || {
    ds-log-fatal "Require jq but it's not installed. Aborting."
    return 1
  }

  local transfer_images machine_env images

  machine_env=$( docker-machine env $1 ) &&
  images=$( echo ${@:2} | sed 's/ /\n/g' ) &&

  echo $images | while read image ; do
    local our_id remote_id

    # Check to see if the image ID's match
    our_id=$( docker inspect ${image} | jq -r ".[].Id") &&
    remote_id=$( (eval "${machine_env}" ; docker inspect ${image} 2>/dev/null ) | jq -r ".[].Id") &&
    if [ "${our_id}" != "${remote_id}" ] ; then
      transfer_images="${transfer_images} ${image}"
    else
      ds-log-info "Image $image already in sync"
    fi
  done
  if [ -n "${transfer_images}" ] ; then
    docker save ${=transfer_images} | (eval "${machine_env}" ; docker load)
  fi
}

ds-run() {
  local node machine_env host_address

  node=$( ds-machine-ls "Pick node for command to run on" ) &&
  machine_env=$( docker-machine env $node ) &&
  host_address=$( docker-machine ip $node ) &&

  ds-log-info "Running command on node $node ($host_address)..."
  ( eval "${machine_env}" ; $@ )
}

ds-run-ucp() {
  local node machine_env host_address

  node=$( ds-machine-ls "Pick node for UCP" ) &&
  machine_env=$( docker-machine env $node ) &&
  host_address=$( docker-machine ip $node ) &&

  ds-log-info "Running docker/ucp on node $node ($host_address)..."
  ( eval "${machine_env}" ; docker run -it --rm --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp $@ )
}

ds-run-ucp-install() {
  local node machine_env host_address

  node=$( ds-machine-ls "Pick node for UCP controller" ) &&
  machine_env=$( docker-machine env $node ) &&
  host_address=$( docker-machine ip $node ) &&

  ds-log-info "Installing UCP controller on node $node ($host_address:$UCP_PORT)..."
  ( eval "${machine_env}" ; docker run -it --rm --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp install --fresh-install --admin-username $UCP_USER --admin-password $UCP_PASS --host-address $host_address --controller-port $UCP_PORT --swarm-port $UCP_SWARM_PORT )
}

ds-run-ucp-join() {
  local controller_node controller_host_address controller_machine_env controller_fingerprint join_node join_host_address join_machine_env 

  controller_node=$( ds-machine-ls "Pick node for UCP controller" ) &&
  controller_host_address=$( docker-machine ip $controller_node ) &&
  controller_machine_env=$( docker-machine env $controller_node ) &&
  controller_fingerprint=$( ( eval "$(docker-machine env node1)" ; docker run --rm --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp fingerprint 2>/dev/null ) | grep -oE "(([0-9A-Z]{2}):){31}([0-9A-Z]{2})" )

  join_node=$( ds-machine-ls "Pick node to join UCP cluster" ) &&
  join_machine_env=$( docker-machine env $join_node ) &&
  join_host_address=$( docker-machine ip $join_node ) &&

  ds-log-info "Installing UCP worker on node $join_node ($join_host_address:$UCP_PORT) and joining cluster on node $controller_node ($controller_host_address:$UCP_PORT)..."
  ( eval "${join_machine_env}" ; docker run -it --rm --name ucp -v /var/run/docker.sock:/var/run/docker.sock docker/ucp join --admin-username $UCP_USER --admin-password $UCP_PASS --host-address $join_host_address --controller-port $UCP_PORT --swarm-port $UCP_SWARM_PORT --url "https://$controller_host_address:$UCP_PORT" --fingerprint $controller_fingerprint )
}

ds-run-dtr() {
  docker run -it --rm dockerhubenterprise/dtr-dev $@
}

ds-run-ucp-bundle(){
  local token

  token=$(curl --insecure https://$1/auth/login -d '{"username": "'"$UCP_USER"'", "password": "'"$UCP_PASS"'"}' -X POST -s | jq -r ".auth_token")
  curl -k -s -H "Authorization: Bearer ${token}" https://$1/api/clientbundle > /tmp/bundle.zip

  mkdir /tmp/certs-$token
  pushd /tmp/certs-$token

  unzip /tmp/bundle.zip > /dev/null
  /bin/rm /tmp/bundle.zip

  cat /tmp/certs-$token/env.sh | sed 's/$(pwd)/\/tmp\/certs-'"$token"'/'

  popd
}

ds-run-dtr-install() {
  local ucp_node ucp_machine_env ucp_url ucp_image_count dtr_node dtr_machine_env dtr_url dtr_replica_id

  ucp_node=$( ds-machine-ls "Pick node for UCP controller" ) &&
  ucp_machine_env=$( docker-machine env $ucp_node ) &&
  ucp_url="$( docker-machine ip $ucp_node ):$UCP_PORT"

  ucp_image_count=$( (eval "${ucp_machine_env}" ; docker ps ) | sed 1d | awk '{print $2}' | grep docker/ucp | wc -l ) &&
  if [[ ucp_image_count -eq 0 ]]; then
    ds-log-fatal "UCP is not installed on node $ucp_node ($ucp_url). Aborting."
    return 1
  fi

  dtr_node=$( ds-machine-ls "Pick node for DTR" ) &&
  dtr_machine_env=$( docker-machine env $dtr_node ) &&
  dtr_url="$( docker-machine ip $dtr_node ):$DTR_PORT"
  dtr_replica_id=$( string2hex $dtr_node | awk '{ printf("%-12s", $0) }' | sed 's/ /0/g' )

  ds-log-info "Installing DTR on node $dtr_node ($dtr_url) with replica ID $replica_id for UCP cluster on node $ucp_node ($ucp_url)..."
  ( eval $(ds-run-ucp-bundle $ucp_url) ; docker run -it --rm dockerhubenterprise/dtr-dev install --ucp-insecure-tls --ucp-url $ucp_url --ucp-username $UCP_USER --ucp-password $UCP_PASS --dtr-external-url $dtr_url --ucp-node $dtr_node --replica-id $dtr_replica_id )
}

ds-run-dtr-join() {
  local ucp_node ucp_machine_env ucp_url ucp_image_count dtr_node dtr_machine_env dtr_url dtr_replica_id dtr_replica_node dtr_replica_machine_env dtr_replica_url

  ucp_node=$( ds-machine-ls "Pick node for UCP controller" ) &&
  ucp_machine_env=$( docker-machine env $ucp_node ) &&
  ucp_url="$( docker-machine ip $ucp_node ):$UCP_PORT"

  ucp_image_count=$( (eval "${ucp_machine_env}" ; docker ps ) | sed 1d | awk '{print $2}' | grep docker/ucp | wc -l ) &&
  if [[ ucp_image_count -eq 0 ]]; then
    ds-log-fatal "UCP is not installed on node $ucp_node ($ucp_url). Aborting."
    return 1
  fi

  dtr_node=$( ds-machine-ls "Pick node for existing DTR" ) &&
  dtr_machine_env=$( docker-machine env $dtr_node ) &&
  dtr_url="$( docker-machine ip $dtr_node ):$DTR_PORT"

  dtr_replica_id=$( string2hex $dtr_node | awk '{ printf("%-12s", $0) }' | sed 's/ /0/g' )

  dtr_image_count=$( (eval "${dtr_machine_env}" ; docker ps ) | sed 1d | awk '{print $2}' | grep dockerhubenterprise/dtr | wc -l ) &&
  if [[ dtr_image_count -eq 0 ]]; then
    ds-log-fatal "DTR is not installed on node $dtr_node ($dtr_url). Aborting."
    return 1
  fi

  dtr_replica_node=$( ds-machine-ls "Pick node to join DTR cluster" ) &&
  dtr_replica_machine_env=$( docker-machine env $dtr_replica_node ) &&
  dtr_replica_url="$( docker-machine ip $dtr_replica_node ):$DTR_PORT"

  ds-log-info "Installing DTR replica on node $dtr_replica_node ($dtr_replica_url) replicating DTR cluster on node $dtr_node ($dtr_url)..."
  ( eval $(ds-run-ucp-bundle $ucp_url) ; docker run -it --rm dockerhubenterprise/dtr-dev join --ucp-insecure-tls --ucp-url $ucp_url --ucp-username $UCP_USER --ucp-password $UCP_PASS --ucp-node $dtr_replica_node --existing-replica-id $dtr_replica_id )
}

ds-run-dtr-etcd() {
  local node machine_env host_address

  node=$( ds-machine-ls "Pick node for etcd keystore" ) &&
  machine_env=$( docker-machine env $node ) &&
  host_address=$( docker-machine ip $node ) &&

  ds-log-info "Running etcd on node $node ($host_address)..."
  ( eval "${machine_env}" ; docker run -d -p $ETCD_CLIENT_PORT:$ETCD_CLIENT_PORT --name etcd docker/dtr-etcd:v2.2.4 -name etcd0 -listen-client-urls http://0.0.0.0:$ETCD_CLIENT_PORT -advertise-client-urls http://${host_address}:$ETCD_CLIENT_PORT )
}

ds-run-consul() {
  local node machine_env host_address

  node=$( ds-machine-ls "Pick node for consul keystore" ) &&
  machine_env=$( docker-machine env $node ) &&
  host_address=$( docker-machine ip $node ) &&

  ds-log-info "Running consul on node $node ($host_address)..."
  ( eval "${machine_env}" ; docker run -d -p $CONSUL_PORT:$CONSUL_PORT -h consul progrium/consul -server -bootstrap )
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ds-run "" docker run --rm -v ucp-node-certs:/etc/docker/ssl:ro docker/ucp-swarm:1.1.1 list --discovery-opt kv.cacertfile=/etc/docker/ssl/ca.pem --discovery-opt kv.certfile=/etc/docker/ssl/cert.pem --discovery-opt kv.keyfile=/etc/docker/ssl/key.pem --discovery-opt kv.path=/docker/nodes --discovery-opt kv.cacertfile=/etc/docker/ssl/ca.pem --discovery-opt kv.certfile=/etc/docker/ssl/cert.pem --discovery-opt kv.keyfile=/etc/docker/ssl/key.pem --discovery-opt kv.path=/docker/nodes etcd://192.168.42.42:1237
